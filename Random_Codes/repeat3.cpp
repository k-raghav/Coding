#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
    bool found = false;
    //bool available = true;
    static const int arr[] = {1000050, 1000984, 1000921, 1000760, 1000881, 1000780, 1000933, 1000825, 1000825, 1000251, 1000978, 1000502, 1000756, 1000756, 1000706, 1000276, 1000887, 1000304, 1000342, 1000780, 1000735, 1000780, 1000057, 1000508, 1000508, 1000780, 1000780, 1000978, 1000780, 1000916, 1000667, 1000619, 1000780, 1000198, 1000086, 1000780, 1000780, 1000780, 1000324, 1000865, 1000975, 1000780, 1000793, 1000483, 1000078, 1000556, 1000281, 1000463, 1000763, 1000780, 1000780, 1000013, 1000064, 1000483, 1000266, 1000780, 1000512, 1000149, 1000322, 1000880, 1000199, 1000456, 1000780, 1000080, 1000780, 1000436, 1000780, 1000382, 1000798, 1000780, 1000780, 1000780, 1000780, 1000727, 1000780, 1000780, 1000780, 1000780, 1000157, 1000780, 1000035, 1000780, 1000213, 1000780, 1000104, 1000496, 1000753, 1000689, 1000014, 1000304, 1000780, 1000007, 1000780, 1000356, 1000044, 1000729, 1000780, 1000769, 1000780, 1000848, 1000571, 1000877, 1000311, 1000780, 1000780, 1000164, 1000300, 1000946, 1000292, 1000780, 1000345, 1000291, 1000780, 1000067, 1000349, 1000780, 1000609, 1000304, 1000816, 1000876, 1000530, 1000751, 1000780, 1000476, 1000780, 1000780, 1000205, 1000827, 1000780, 1000780, 1000402, 1000037, 1000029, 1000270, 1000048, 1000705, 1000115, 1000780, 1000673, 1000344, 1000723, 1000866, 1000459, 1000780, 1000517, 1000391, 1000624, 1000127, 1000458, 1000608, 1000744, 1000526, 1000021, 1000780, 1000490, 1000780, 1000455, 1000738, 1000355, 1000780, 1000780, 1000742, 1000402, 1000780, 1000780, 1000780, 1000198, 1000780, 1000142, 1000134, 1000367, 1000091, 1000264, 1000161, 1000808, 1000360, 1000411, 1000239, 1000404, 1000148, 1000550, 1000618, 1000012, 1000780, 1000731, 1000780, 1000927, 1000131, 1000114, 1000780, 1000780, 1000666, 1000687, 1000780, 1000780, 1000780, 1000780, 1000500, 1000357, 1000780, 1000037, 1000437, 1000933, 1000874, 1000825, 1000654, 1000003, 1000599, 1000780, 1000642, 1000455, 1000954, 1000825, 1000780, 1000574, 1000892, 1000133, 1000582, 1000779, 1000181, 1000249, 1000780, 1000294, 1000780, 1000431, 1000152, 1000430, 1000174, 1000780, 1000212, 1000780, 1000874, 1000938, 1000050, 1000952, 1000780, 1000780, 1000999, 1000949, 1000780, 1000992, 1000155, 1000384, 1000428, 1000596, 1000751, 1000760, 1000185, 1000485, 1000996, 1000893, 1000561, 1000553, 1000780, 1000664, 1000499, 1000853, 1000271, 1000086, 1000780, 1000780, 1000697, 1000780, 1000579, 1000499, 1000356, 1000648, 1000780, 1000727, 1000780, 1000780, 1000780, 1000780, 1000051, 1000882, 1000274, 1000245, 1000780, 1001000, 1000262, 1000780, 1000680, 1000618, 1000780, 1000757, 1000458, 1000054, 1000448, 1000780, 1000780, 1000780, 1000453, 1000512, 1000780, 1000780, 1000206, 1000780, 1000280, 1000710, 1000702, 1000309, 1000364, 1000638, 1000747, 1000557, 1000780, 1000780, 1000780, 1000068, 1000184, 1000051, 1000799, 1000027, 1000780, 1000761, 1000082, 1000301, 1000193, 1000780, 1000138, 1000684, 1000780, 1000402, 1000847, 1000657, 1000276, 1000212, 1000596, 1000962, 1000926, 1000780, 1000780, 1000960, 1000261, 1000989, 1000780, 1000780, 1000780, 1000780, 1000780, 1000475, 1000483, 1000780, 1000179, 1000944, 1000615, 1000780, 1000780, 1000507, 1000641, 1000496, 1000546, 1000241, 1000780, 1000780, 1000174, 1000591, 1000948, 1000780, 1000780, 1000780, 1000949, 1000780, 1000606, 1000780, 1000360, 1000949, 1000556, 1000780, 1000213, 1000657, 1000565, 1000577, 1000450, 1000625, 1000859, 1000964, 1000367, 1000780, 1000853, 1000780, 1000780, 1000412, 1000064, 1000006, 1000858, 1000905, 1000252, 1000545, 1000277, 1000236, 1000740, 1000380, 1000608, 1000236, 1000780, 1000621, 1000780, 1000780, 1000780, 1000780, 1000008, 1000517, 1000780, 1000935, 1000845, 1000510, 1000983, 1000740, 1000896, 1000780, 1000216, 1000841, 1000229, 1000927, 1000780, 1000265, 1000780, 1000780, 1000780, 1000264, 1000511, 1000780, 1000602, 1000053, 1000780, 1000893, 1000780, 1000326, 1000683, 1000780, 1000780, 1000780, 1000780, 1000780, 1000780, 1000780, 1000780, 1000780, 1000973, 1000780, 1000780, 1000780, 1000823, 1000912, 1000966, 1000787, 1000035, 1000412, 1000946, 1000780, 1000583, 1000780, 1000266, 1000462, 1000329, 1000673, 1000518, 1000345, 1000230, 1000187, 1000268, 1000069, 1000780, 1000901, 1000922, 1000985, 1000022, 1000752, 1000890, 1000185, 1000780, 1000541, 1000032, 1000797, 1000780, 1000417, 1000111, 1000780, 1000518, 1000767, 1000780, 1000978, 1000193, 1000171, 1000867, 1000780, 1000780, 1000780, 1000782, 1000241, 1000780, 1000306, 1000528, 1000780, 1000780, 1000140, 1000013, 1000780, 1000926, 1000001, 1000780, 1000780, 1000917, 1000911, 1000810, 1000429, 1000189, 1000441, 1000760, 1000780, 1000574, 1000536, 1000780, 1000990, 1000291, 1000272, 1000232, 1000664, 1000780, 1000780, 1000780, 1000631, 1000545, 1000934, 1000594, 1000871, 1000780, 1000780, 1000780, 1000093, 1000933, 1000780, 1000780, 1000259, 1000780, 1000009, 1000025, 1000780, 1000780, 1000570, 1000743, 1000780, 1000780, 1000780, 1000780, 1000744, 1000780, 1000417, 1000296, 1000823, 1000780, 1000582, 1000918, 1000684, 1000847, 1000780, 1000503, 1000612, 1000246, 1000780, 1000438, 1000780, 1000780, 1000780, 1000014, 1000972, 1000301, 1000780, 1000780, 1000780, 1000054, 1000780, 1000780, 1000547, 1000766, 1000780, 1000249, 1000780, 1000969, 1000255, 1000780, 1000432, 1000699, 1000689, 1000780, 1000780, 1000780, 1000201, 1000780, 1000199, 1000780, 1000550, 1000299, 1000542, 1000834, 1000779, 1000780, 1000365, 1000780, 1000057, 1000780, 1000441, 1000780, 1000367, 1000203, 1000780, 1000276, 1000780, 1000650, 1000780, 1000780, 1000145, 1000996, 1000780, 1000335, 1000599, 1000780, 1000117, 1000408, 1000196, 1000680, 1000449, 1000780, 1000404, 1000527, 1000780, 1000846, 1000444, 1000780, 1000009, 1000780, 1000870, 1000780, 1000780, 1000015, 1000895, 1000780, 1000780, 1000304, 1000780, 1000780, 1000550, 1000802, 1000780, 1000718, 1000780, 1000780, 1000893, 1000996, 1000538, 1000010, 1000445, 1000530, 1000780, 1000207, 1000780, 1000780, 1000326, 1000714, 1000780, 1000222, 1000322, 1000957, 1000824, 1000030, 1000780, 1000780, 1000812, 1000919, 1000604, 1000143, 1000780, 1000840, 1000780, 1000188, 1000603, 1000780, 1000632, 1000625, 1000532, 1000989, 1000318, 1000780, 1000780, 1000728, 1000763, 1000873, 1000877, 1000608, 1000808, 1000936, 1000470, 1000882, 1000780, 1000780, 1000780, 1000780, 1000175, 1000030, 1000728, 1000780, 1000503, 1000994, 1000780, 1000463, 1000780, 1000780, 1000523, 1000474, 1000264, 1000780, 1000780, 1000628, 1000780, 1000031, 1000071, 1000780, 1000570, 1000176, 1000281, 1000643, 1000977, 1000780, 1000551, 1000021, 1000036, 1000780, 1000401, 1000028, 1000367, 1000780, 1000372, 1000780, 1000991, 1000780, 1000780, 1000720, 1000944, 1000780, 1000449, 1000721, 1000780, 1000034, 1000820, 1000780, 1000780, 1000847 }; 
        vector<int> A(arr, arr + sizeof(arr) / sizeof(arr[0]) );
    int n = A.size();
    map<int,int> element_count;
    map<int,int>::iterator it;
    cout << n << endl;
    for (int i = 0 ; i < n ; i++) {
        if(element_count.size() < 3) {
            if(element_count.find(A[i]) != element_count.end())
                element_count.find(A[i])->second++;
            else 
                element_count.insert(make_pair(A[i],1));
        }
        else {
            if(element_count.find(A[i]) != element_count.end())
                element_count.find(A[i])->second++;
            else {
                  int erase=-1;
                  for (it=element_count.begin(); it!=element_count.end(); ++it) {
                      if(it -> second == 1) {
                          erase = it->first;
                          break;
                      }
                  }
                  if(erase != -1) {
                      element_count.erase(element_count.find(erase));
                      element_count.insert(make_pair(A[i],1));
                  }
            }
        }
    }
    for (it=element_count.begin(); it!=element_count.end(); ++it) {
        int ele = it->first;
        int count = 0;
        cout << ele << " " << it->second << endl;
        for (int i = 0 ; i < n ; i++) {
            if(A[i] == ele) count++;
        }
        it->second = count;
    }
    for (it=element_count.begin(); it!=element_count.end(); ++it) {
        cout << it->first << " " << it->second << endl;
        if(it->second > n/3) {
            cout << it -> first << endl;
            return it->first;
        }
    }
    return -1;

}
